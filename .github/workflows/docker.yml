name: Docker

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop
  release:
    types: [published]

jobs:
  tests:
    name: Build geonature images locally and test services
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: True

      - name: Git GeoNature Sumbodule Update
        run: |
          git submodule init
          git submodule update
        working-directory: sources/GeoNature

      - name: copy cur environment
        run: cp .env.current .env

      - name: Build all images
        run: ./build/build_geonature_all.sh

      - name: Copy config samples
        run: ./scripts/init_applications_config.sh

      - name: Lauch docker compose
        run: docker compose up -d

      - name: Log geonature backend
        run: |
          docker compose logs -f > /tmp/docker_compose.log &

      - name: test geonature frontend response
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 60
          max_attempts: 10
          retry_wait_seconds: 20
          command: |
            url_test="http://localhost:8081/geonature"
            res=$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' "${url_test}")
            echo $res
            [ "$res" = "200" ] || [ "$res" = "301" ] && exit 0 || exit 1

      - name: test geonature backend response
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 60
          max_attempts: 15
          retry_wait_seconds: 20
          command: |
            url_test="http://localhost:8081/geonature/api/gn_commons/config"
            res=$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' "${url_test}")
            echo $res
            [ "$res" = "200" ] || [ "$res" = "301" ] && exit 0 || exit 1

      - name: log if fail
        if: ${{ failure() }}
        run: |
          cat /tmp/docker_compose.log
          docker compose ps

  backend:
    name: Build geonature docker images for backend
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: True

      - name: Git GeoNature Sumbodule Update
        run: |
          git submodule init
          git submodule update
        working-directory: sources/GeoNature

      - name: Set Environnement variables
        run: |
          scripts/init_env.sh >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and export backend app image
        uses: docker/build-push-action@v4
        with:
          context: ./sources/GeoNature
          file: ./sources/GeoNature/backend/Dockerfile
          tags: "${{env.GN_BACKEND_TAGS}}"
          push: true
          target: prod

      - name: Build and export backend wheels image
        uses: docker/build-push-action@v4
        with:
          context: ./sources/GeoNature
          file: ./sources/GeoNature/backend/Dockerfile
          tags: "${{env.GN_BACKEND_TAGS}}-wheels"
          push: true
          target: wheels

      - name: Build and export backend app + 4 modules
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./build/Dockerfile-geonature-backend
          tags: "${{env.GN_BACKEND_4M_TAGS}}"
          labels: |
            org.opencontainers.image.title=Application GeoNature + 4 modules principaux
            org.opencontainers.image.description=${{env.GN_4M_DESCRIPTION}}
            ${{env.GN_LABELS}}
          push: true
          build-args: GEONATURE_BACKEND_IMAGE=${{env.GN_BACKEND_IMAGE}}

  frontend:
    name: Build geonature docker images for frontend
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: True

      - name: Git GeoNature Sumbodule Update
        run: |
          git submodule init
          git submodule update
        working-directory: ./sources/GeoNature

      - name: Set Environnement variables
        run: |
          scripts/init_env.sh >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and export frontend source
        uses: docker/build-push-action@v4
        with:
          context: ./sources/GeoNature
          file: ./sources/GeoNature/frontend/Dockerfile
          target: source
          tags: "${{env.GN_FRONTEND_TAGS}}-source"
          push: true

      - name: Build and export frontend nginx
        uses: docker/build-push-action@v4
        with:
          context: ./sources/GeoNature
          file: ./sources/GeoNature/frontend/Dockerfile
          target: prod-base
          tags: "${{env.GN_FRONTEND_TAGS}}-nginx"
          push: true

      - name: Build and export frontend app image
        uses: docker/build-push-action@v4
        with:
          context: ./sources/GeoNature
          file: ./sources/GeoNature/frontend/Dockerfile
          tags: "${{env.GN_FRONTEND_TAGS}}"
          push: true
          target: prod

      - name: Build and export frontend + 4 modules
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./build/Dockerfile-geonature-frontend
          tags: "${{env.GN_FRONTEND_4M_TAGS}}"
          build-args: GEONATURE_FRONTEND_IMAGE=${{env.GN_FRONTEND_IMAGE}}
          push: true
